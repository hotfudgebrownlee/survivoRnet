pmf <- tribe_mapping %>%
select(version_season, episode, day, tribe_status) %>%
unique() %>% group_by(version_season) %>% mutate(premier = min(episode)) %>%
filter(tribe_status == "Merged") %>% mutate(merge = min(episode)) %>%
filter(day == max(day)) %>% mutate(finale = max(episode)) %>%
select(version_season, premier, merge, finale) %>% unique() %>%
left_join(reunion, by="version_season") %>% rename(reunion = episode)
pmf <- tribe_mapping %>%
select(version_season, episode, day, tribe_status) %>%
unique() %>% group_by(version_season) %>% mutate(premier = min(episode)) %>%
filter(tribe_status == "Merged") %>% mutate(merge = min(episode)) %>%
filter(day == max(day)) %>% mutate(finale = max(episode)) %>%
select(version_season, premier, merge, finale) %>% unique() %>%
left_join(reunion, by="version_season") %>% rename(reunion = episode) %>%
mutate(reunion = case_when(
reunion == finale ~ as.integer(NA), TRUE ~ reunion))
pmf <- tribe_mapping %>%
select(version_season, episode, day, tribe_status) %>%
unique() %>% group_by(version_season) %>% mutate(premier = min(episode)) %>%
filter(tribe_status == "Merged") %>% mutate(merge = min(episode)) %>%
filter(day == max(day)) %>% mutate(finale = max(episode)) %>%
select(version_season, premier, merge, finale) %>% unique() %>%
left_join(reunion, by="version_season") %>% rename(reunion = episode) %>%
mutate(reunion = case_when(
reunion == finale ~ as.string(NA), TRUE ~ reunion))
pmf <- tribe_mapping %>%
select(version_season, episode, day, tribe_status) %>%
unique() %>% group_by(version_season) %>% mutate(premier = min(episode)) %>%
filter(tribe_status == "Merged") %>% mutate(merge = min(episode)) %>%
filter(day == max(day)) %>% mutate(finale = max(episode)) %>%
select(version_season, premier, merge, finale) %>% unique() %>%
left_join(reunion, by="version_season") %>% rename(reunion = episode) %>%
mutate(reunion = case_when(
reunion == finale ~ as_string(NA), TRUE ~ reunion))
pmf <- tribe_mapping %>%
select(version_season, episode, day, tribe_status) %>%
unique() %>% group_by(version_season) %>% mutate(premier = min(episode)) %>%
filter(tribe_status == "Merged") %>% mutate(merge = min(episode)) %>%
filter(day == max(day)) %>% mutate(finale = max(episode)) %>%
select(version_season, premier, merge, finale) %>% unique() %>%
left_join(reunion, by="version_season") %>% rename(reunion = episode) %>%
mutate(reunion = case_when(
reunion == finale ~ as.character(NA), TRUE ~ reunion))
pmf <- tribe_mapping %>%
select(version_season, episode, day, tribe_status) %>%
unique() %>% group_by(version_season) %>% mutate(premier = min(episode)) %>%
filter(tribe_status == "Merged") %>% mutate(merge = min(episode)) %>%
filter(day == max(day)) %>% mutate(finale = max(episode)) %>%
select(version_season, premier, merge, finale) %>% unique() %>%
left_join(reunion, by="version_season") %>% rename(reunion = episode) %>%
mutate(reunion = case_when(
reunion == finale ~ "as.character(NA)", TRUE ~ "reunion"))
pmf <- tribe_mapping %>%
select(version_season, episode, day, tribe_status) %>%
unique() %>% group_by(version_season) %>% mutate(premier = min(episode)) %>%
filter(tribe_status == "Merged") %>% mutate(merge = min(episode)) %>%
filter(day == max(day)) %>% mutate(finale = max(episode)) %>%
select(version_season, premier, merge, finale) %>% unique()
pmf <- tribe_mapping %>%
select(version_season, episode, day, tribe_status) %>%
unique() %>% group_by(version_season) %>% mutate(premier = min(episode)) %>%
filter(tribe_status == "Merged") %>% mutate(merge = min(episode)) %>%
filter(day == max(day)) %>% mutate(finale = max(episode)) %>%
select(version_season, premier, merge, finale) %>% unique() %>%
mutate(pmf = c(premier, merge, finale))
pmf <- tribe_mapping %>%
select(version_season, episode, day, tribe_status) %>%
unique() %>% group_by(version_season) %>% mutate(premier = min(episode)) %>%
filter(tribe_status == "Merged") %>% mutate(merge = min(episode)) %>%
filter(day == max(day)) %>% mutate(finale = max(episode)) %>%
select(version_season, premier, merge, finale) %>% unique() %>%
nest()
pmf <- tribe_mapping %>%
select(version_season, episode, day, tribe_status) %>%
unique() %>% group_by(version_season) %>% mutate(premier = min(episode)) %>%
filter(tribe_status == "Merged") %>% mutate(merge = min(episode)) %>%
filter(day == max(day)) %>% mutate(finale = max(episode)) %>%
select(version_season, premier, merge, finale) %>% unique() %>%
nest() %>% rename(pmf = data)
View(pmf[[2]][[1]])
# top 10 seasons
pmf <- tribe_mapping %>%
select(version_season, episode, day, tribe_status) %>%
unique() %>% group_by(version_season) %>% mutate(premier = min(episode)) %>%
filter(tribe_status == "Merged") %>% mutate(merge = min(episode)) %>%
filter(day == max(day)) %>% mutate(finale = max(episode)) %>%
select(version_season, premier, merge, finale) %>% unique() %>%
nest() %>% rename(pmf = data)
topSzns <- viewers %>% select(version_season, viewers, imdb_rating) %>%
group_by(version_seaon) %>%
summarise(tot_viewers = sum(viewers, na.rm=TRUE),
avg_imdb = mean(imdb_rating, na.rm=TRUE)) %>%
merge(pmf, by = "version_season")
topSzns <- viewers %>% select(version_season, viewers, imdb_rating) %>%
group_by(version_season) %>%
summarise(tot_viewers = sum(viewers, na.rm=TRUE),
avg_imdb = mean(imdb_rating, na.rm=TRUE)) %>%
merge(pmf, by = "version_season")
topSzns <- viewers %>% select(version_season, episode, viewers, imdb_rating) %>%
merge(pmf, by = "version_season") %>%
group_by(version_season) %>%
summarise(tot_viewers = sum(viewers, na.rm=TRUE),
avg_imdb = mean(imdb_rating, na.rm=TRUE))
topSzns <- viewers %>% select(version_season, episode, viewers, imdb_rating) %>%
merge(pmf, by = "version_season")
topSzns <- viewers %>% select(version_season, episode, viewers, imdb_rating) %>%
merge(pmf, by = "version_season") %>%
mutate(yeet = case_when(
episode %in% c(pmf$premier,pmf$merge,pmf$finale) ~ TRUE, TRUE ~ FALSE))
# top 10 seasons
pmf <- tribe_mapping %>%
select(version_season, episode, day, tribe_status) %>%
unique() %>% group_by(version_season) %>% mutate(premier = min(episode)) %>%
filter(tribe_status == "Merged") %>% mutate(merge = min(episode)) %>%
filter(day == max(day)) %>% mutate(finale = max(episode)) %>%
select(version_season, premier, merge, finale) %>% unique() %>%
mutate(pmf = list(premier, merge, finale))
stats <- castaways %>%
select(version_season, castaway_id, full_name, day, order, jury_status) %>%
group_by(version_season) %>% mutate(order = max(order) + 1 - order) %>%
arrange(version_season, order) %>% mutate(day = case_when(
!(version_season %in% c("US38", "US40")) ~ day,
is.na(jury_status) ~ day, day >= 35 ~ day, TRUE ~ 35)) %>% ungroup() %>%
select(-c(jury_status)) %>% group_by(version_season, castaway_id) %>%
mutate(order = case_when(n() > 1 ~ min(order), TRUE ~ order),
day = case_when(n() > 1 ~ max(day), TRUE ~ day)) %>% unique() %>%
ungroup() %>% group_by(version_season) %>% mutate(order = row_number()) %>%
ungroup() %>% group_by(castaway_id) %>%
mutate(total_seasons=n(), total_days=sum(day),
best_place=min(order), avg_place=round(mean(order),2)) %>%
ungroup()
# top 10 seasons
pmf <- tribe_mapping %>%
select(version_season, episode, day, tribe_status) %>%
unique() %>% group_by(version_season) %>% mutate(premier = min(episode)) %>%
filter(tribe_status == "Merged") %>% mutate(merge = min(episode)) %>%
filter(day == max(day)) %>% mutate(finale = max(episode)) %>%
select(version_season, premier, merge, finale) %>% unique()
# Chunk 1
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
# Chunk 2: load_libraries
library(tidyverse)
library(survivoR)
library(igraph)
# Chunk 3: load_data
selfCompare <- read_csv("./selfCompare.csv", show_col_types = FALSE) %>%
select(-c(gender)) %>% fill(season) %>%
pivot_longer(3:9, values_to="inspiration") %>% select(-c(name)) %>%
filter(!is.na(inspiration)) %>%
separate(inspiration, into = c('inspFirst', 'inspLast'),
sep=" ", extra="merge", remove=FALSE)
# Chunk 4: tidy_people
fullNames <- castaway_details %>%
merge((castaways %>% select(c(castaway_id, version_season))),
by="castaway_id") %>%
mutate(full_name = case_when(
castaway_id == "US0281" ~ "JT Thomas",
castaway_id == "US0029" ~ "Elisabeth Hasselbeck",
TRUE ~ full_name)) %>%
separate(full_name, into = c('first','last'),
sep = " ", extra = "merge", remove = FALSE) %>%
mutate(name = case_when(
str_detect(full_name,short_name) ~ str_c(first, ' ', last),
TRUE ~ str_c(first, ' "', short_name, '" ', last))) %>%
select(castaway_id, full_name, first, short_name, last) %>%
merge((selfCompare %>% select(c(inspiration, inspFirst, inspLast))),
by.x="last", by.y="inspLast", all=TRUE) %>% unique() %>%
mutate(inspiration = case_when(
!is.na(inspiration) ~ inspiration,
str_detect(short_name, first) ~ full_name,
short_name == last ~ full_name,
castaway_id == "US0302" ~ full_name,
castaway_id == "US0305" ~ "Jimmy Tarantino",
TRUE ~ str_c(short_name, last, sep=" "))) %>%
mutate(fullName = case_when(
is.na(inspFirst) ~ inspiration,
full_name == inspiration ~ full_name,
short_name == inspFirst ~ inspiration,
short_name == "Shan" ~ str_c(short_name, last, sep=" "),
str_detect(full_name, short_name) ~ full_name,
TRUE ~ str_c(short_name, last, sep=" "))) %>%
rename(shortName = short_name) %>%
left_join(castaways, by="castaway_id") %>% unique() %>%
mutate(season = substr(version_season,3,4)) %>%
select(season, castaway_id, first, shortName, last, fullName)
selfCompare <- selfCompare %>% select(-c(inspFirst, inspLast)) %>%
mutate(season = substr(season,8,9)) %>%
left_join(fullNames,  by=c("season"="season", "castaway"="shortName")) %>%
rename(cast_name = fullName, cast_id = castaway_id) %>%
select(cast_id, cast_name, inspiration) %>%
left_join(fullNames, by=c("inspiration"="fullName")) %>%
rename(inspo_name = inspiration, inspo_id = castaway_id) %>%
select(cast_id, cast_name, inspo_id, inspo_name) %>% unique()
setwd("~/Important/BYUI/2022-02-Spring/02-ProjectManagement/network/survivoRnet")
# Chunk 1
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
# Chunk 2: load_libraries
library(tidyverse)
library(survivoR)
library(igraph)
# Chunk 3: load_data
selfCompare <- read_csv("./selfCompare.csv", show_col_types = FALSE) %>%
select(-c(gender)) %>% fill(season) %>%
pivot_longer(3:9, values_to="inspiration") %>% select(-c(name)) %>%
filter(!is.na(inspiration)) %>%
separate(inspiration, into = c('inspFirst', 'inspLast'),
sep=" ", extra="merge", remove=FALSE)
# Chunk 4: tidy_people
fullNames <- castaway_details %>%
merge((castaways %>% select(c(castaway_id, version_season))),
by="castaway_id") %>%
mutate(full_name = case_when(
castaway_id == "US0281" ~ "JT Thomas",
castaway_id == "US0029" ~ "Elisabeth Hasselbeck",
TRUE ~ full_name)) %>%
separate(full_name, into = c('first','last'),
sep = " ", extra = "merge", remove = FALSE) %>%
mutate(name = case_when(
str_detect(full_name,short_name) ~ str_c(first, ' ', last),
TRUE ~ str_c(first, ' "', short_name, '" ', last))) %>%
select(castaway_id, full_name, first, short_name, last) %>%
merge((selfCompare %>% select(c(inspiration, inspFirst, inspLast))),
by.x="last", by.y="inspLast", all=TRUE) %>% unique() %>%
mutate(inspiration = case_when(
!is.na(inspiration) ~ inspiration,
str_detect(short_name, first) ~ full_name,
short_name == last ~ full_name,
castaway_id == "US0302" ~ full_name,
castaway_id == "US0305" ~ "Jimmy Tarantino",
TRUE ~ str_c(short_name, last, sep=" "))) %>%
mutate(fullName = case_when(
is.na(inspFirst) ~ inspiration,
full_name == inspiration ~ full_name,
short_name == inspFirst ~ inspiration,
short_name == "Shan" ~ str_c(short_name, last, sep=" "),
str_detect(full_name, short_name) ~ full_name,
TRUE ~ str_c(short_name, last, sep=" "))) %>%
rename(shortName = short_name) %>%
left_join(castaways, by="castaway_id") %>% unique() %>%
mutate(season = substr(version_season,3,4)) %>%
select(season, castaway_id, first, shortName, last, fullName)
selfCompare <- selfCompare %>% select(-c(inspFirst, inspLast)) %>%
mutate(season = substr(season,8,9)) %>%
left_join(fullNames,  by=c("season"="season", "castaway"="shortName")) %>%
rename(cast_name = fullName, cast_id = castaway_id) %>%
select(cast_id, cast_name, inspiration) %>%
left_join(fullNames, by=c("inspiration"="fullName")) %>%
rename(inspo_name = inspiration, inspo_id = castaway_id) %>%
select(cast_id, cast_name, inspo_id, inspo_name) %>% unique()
stats <- castaways %>%
select(version_season, castaway_id, full_name, day, order, jury_status) %>%
group_by(version_season) %>% mutate(order = max(order) + 1 - order) %>%
arrange(version_season, order) %>% mutate(day = case_when(
!(version_season %in% c("US38", "US40")) ~ day,
is.na(jury_status) ~ day, day >= 35 ~ day, TRUE ~ 35)) %>% ungroup() %>%
select(-c(jury_status)) %>% group_by(version_season, castaway_id) %>%
mutate(order = case_when(n() > 1 ~ min(order), TRUE ~ order),
day = case_when(n() > 1 ~ max(day), TRUE ~ day)) %>% unique() %>%
ungroup() %>% group_by(version_season) %>% mutate(order = row_number()) %>%
ungroup() %>% group_by(castaway_id) %>%
mutate(total_seasons=n(), total_days=sum(day),
best_place=min(order), avg_place=round(mean(order),2)) %>%
ungroup()
# top 10 seasons
pmf <- tribe_mapping %>%
select(version_season, episode, day, tribe_status) %>%
unique() %>% group_by(version_season) %>% mutate(premier = min(episode)) %>%
filter(tribe_status == "Merged") %>% mutate(merge = min(episode)) %>%
filter(day == max(day)) %>% mutate(finale = max(episode)) %>%
select(version_season, premier, merge, finale) %>% unique()
View(pmf)
topSzns <- viewers %>% select(version_season, episode, viewers, imdb_rating) %>%
merge(pmf, by = "version_season") %>%
mutate(yeet = case_when(
episode %in% c(premier,merge,finale) ~ TRUE, TRUE ~ FALSE))
topSzns <- viewers %>% select(version_season, episode, viewers, imdb_rating) %>%
merge(pmf, by = "version_season") %>%
mutate(yeet = case_when(episode == premier ~ TRUE, episode == merge ~ TRUE,
episode == finale ~ TRUE, TRUE ~ FALSE))
topSzns <- viewers %>% select(version_season, episode, viewers, imdb_rating) %>%
merge(pmf, by = "version_season") %>%
mutate(pmf = case_when(episode %in% c(premier, merge, finale), TRUE ~ FALSE))
topSzns <- viewers %>% select(version_season, episode, viewers, imdb_rating) %>%
merge(pmf, by = "version_season") %>%
mutate(pmf = case_when(episode %in% c(premier, merge, finale)~ TRUE, TRUE ~ FALSE))
topSzns <- viewers %>% select(version_season, episode, viewers, imdb_rating) %>%
merge(pmf, by = "version_season") %>%
mutate(pmf = case_when(episode == premier ~ TRUE, episode == merge ~ TRUE,
episode == finale ~ TRUE, TRUE ~ FALSE))
# top 10 seasons
topSzns <- tribe_mapping %>%
select(version_season, episode, day, tribe_status) %>%
unique() %>% group_by(version_season) %>% mutate(premier = min(episode)) %>%
filter(tribe_status == "Merged") %>% mutate(merge = min(episode)) %>%
filter(day == max(day)) %>% mutate(finale = max(episode)) %>%
select(version_season, premier, merge, finale) %>% unique() %>%
merge((viewers %>% select(version_season, episode, viewers, imdb_rating)),
by = "version_season") %>%
mutate(pmf = case_when(episode == premier ~ TRUE, episode == merge ~ TRUE,
episode == finale ~ TRUE, TRUE ~ FALSE))
# top 10 seasons
topSzns <- tribe_mapping %>%
select(version_season, episode, day, tribe_status) %>%
unique() %>% group_by(version_season) %>% mutate(premier = min(episode)) %>%
filter(tribe_status == "Merged") %>% mutate(merge = min(episode)) %>%
filter(day == max(day)) %>% mutate(finale = max(episode)) %>%
select(version_season, premier, merge, finale) %>% unique() %>%
merge((viewers %>% select(version_season, episode, viewers, imdb_rating)),
by = "version_season") %>%
mutate(pmf = case_when(episode == premier ~ TRUE, episode == merge ~ TRUE,
episode == finale ~ TRUE, TRUE ~ FALSE)) %>%
group_by(version_season) %>%
summarise(tot_viewers = sum(viewers, na.rm=TRUE),
avg_imdb = mean(imdb_rating, na.rm=TRUE),
pmf_imdb = mean(topSzns[topSzns$pmf == TRUE, 'imdb_rating']))
# top 10 seasons
topSzns <- tribe_mapping %>%
select(version_season, episode, day, tribe_status) %>%
unique() %>% group_by(version_season) %>% mutate(premier = min(episode)) %>%
filter(tribe_status == "Merged") %>% mutate(merge = min(episode)) %>%
filter(day == max(day)) %>% mutate(finale = max(episode)) %>%
select(version_season, premier, merge, finale) %>% unique()
# top 10 seasons
pmf <- tribe_mapping %>%
select(version_season, episode, day, tribe_status) %>%
unique() %>% group_by(version_season) %>% mutate(premier = min(episode)) %>%
filter(tribe_status == "Merged") %>% mutate(merge = min(episode)) %>%
filter(day == max(day)) %>% mutate(finale = max(episode)) %>%
select(version_season, premier, merge, finale) %>% unique() %>%
merge((viewers %>% select(version_season, episode, imdb_rating)),
by = "version_season")
# top 10 seasons
pmf <- tribe_mapping %>%
select(version_season, episode, day, tribe_status) %>%
unique() %>% group_by(version_season) %>% mutate(premier = min(episode)) %>%
filter(tribe_status == "Merged") %>% mutate(merge = min(episode)) %>%
filter(day == max(day)) %>% mutate(finale = max(episode)) %>%
select(version_season, premier, merge, finale) %>% unique() %>%
merge((viewers %>% select(version_season, episode, imdb_rating)),
by = "version_season") %>%
filter(episode == merge | episode == finale | episode == premier)
# top 10 seasons
pmf <- tribe_mapping %>%
select(version_season, episode, day, tribe_status) %>%
unique() %>% group_by(version_season) %>% mutate(premier = min(episode)) %>%
filter(tribe_status == "Merged") %>% mutate(merge = min(episode)) %>%
filter(day == max(day)) %>% mutate(finale = max(episode)) %>%
select(version_season, premier, merge, finale) %>% unique() %>%
merge((viewers %>% select(version_season, episode, imdb_rating)),
by = "version_season") %>% group_by(version_season) %>%
filter(episode == merge | episode == finale | episode == premier) %>%
select(version_season, episode, imdb_rating) %>%
summarize(pmf_imdb = mean(imdb_rating, na.rm=TRUE))
# top 10 seasons
pmf <- tribe_mapping %>%
select(version_season, episode, day, tribe_status) %>%
unique() %>% group_by(version_season) %>% mutate(premier = min(episode)) %>%
filter(tribe_status == "Merged") %>% mutate(merge = min(episode)) %>%
filter(day == max(day)) %>% mutate(finale = max(episode)) %>%
select(version_season, premier, merge, finale) %>% unique() %>%
merge((viewers %>% select(version_season, episode, imdb_rating)),
by = "version_season") %>% group_by(version_season) %>%
filter(episode == merge | episode == finale | episode == premier) %>%
select(version_season, episode, imdb_rating) %>%
mutate(pmf_imdb = mean(imdb_rating, na.rm=TRUE))
# top 10 seasons
pmf <- tribe_mapping %>%
select(version_season, episode, day, tribe_status) %>%
unique() %>% group_by(version_season) %>% mutate(premier = min(episode)) %>%
filter(tribe_status == "Merged") %>% mutate(merge = min(episode)) %>%
filter(day == max(day)) %>% mutate(finale = max(episode)) %>%
select(version_season, premier, merge, finale) %>% unique() %>%
merge((viewers %>% select(version_season, episode, imdb_rating)),
by = "version_season") %>% group_by(version_season) %>%
filter(episode == merge | episode == finale | episode == premier) %>%
select(version_season, episode, imdb_rating) %>%
summarise(pmf_imdb = mean(imdb_rating, na.rm=TRUE)) %>%
merge((viewers %>% select(version_season, episode, viewers, imdb_rating)),
by = "version_season") %>%
mutate(pmf = case_when(episode == premier ~ TRUE, episode == merge ~ TRUE,
episode == finale ~ TRUE, TRUE ~ FALSE))
# top 10 seasons
pmf <- tribe_mapping %>%
select(version_season, episode, day, tribe_status) %>%
unique() %>% group_by(version_season) %>% mutate(premier = min(episode)) %>%
filter(tribe_status == "Merged") %>% mutate(merge = min(episode)) %>%
filter(day == max(day)) %>% mutate(finale = max(episode)) %>%
select(version_season, premier, merge, finale) %>% unique() %>%
merge((viewers %>% select(version_season, episode, imdb_rating)),
by = "version_season") %>% group_by(version_season) %>%
filter(episode == merge | episode == finale | episode == premier) %>%
select(version_season, episode, imdb_rating) %>%
summarise(pmf_imdb = mean(imdb_rating, na.rm=TRUE)) %>%
merge((viewers %>% select(version_season, episode, viewers, imdb_rating)),
by = "version_season") %>% group_by(version_season) %>%
summarise(tot_viewers = sum(viewers, na.rm=TRUE),
avg_imdb = mean(imdb_rating, na.rm=TRUE))
# top 10 seasons
pmf <- tribe_mapping %>%
select(version_season, episode, day, tribe_status) %>%
unique() %>% group_by(version_season) %>% mutate(premier = min(episode)) %>%
filter(tribe_status == "Merged") %>% mutate(merge = min(episode)) %>%
filter(day == max(day)) %>% mutate(finale = max(episode)) %>%
select(version_season, premier, merge, finale) %>% unique() %>%
merge((viewers %>% select(version_season, episode, imdb_rating)),
by = "version_season") %>% group_by(version_season) %>%
filter(episode == merge | episode == finale | episode == premier) %>%
select(version_season, episode, imdb_rating) %>%
summarise(pmf_imdb = mean(imdb_rating, na.rm=TRUE)) %>%
merge((viewers %>% select(version_season, episode, viewers, imdb_rating)),
by = "version_season")
# top 10 seasons
pmf <- tribe_mapping %>%
select(version_season, episode, day, tribe_status) %>%
unique() %>% group_by(version_season) %>% mutate(premier = min(episode)) %>%
filter(tribe_status == "Merged") %>% mutate(merge = min(episode)) %>%
filter(day == max(day)) %>% mutate(finale = max(episode)) %>%
select(version_season, premier, merge, finale) %>% unique() %>%
merge((viewers %>% select(version_season, episode, imdb_rating)),
by = "version_season") %>% group_by(version_season) %>%
filter(episode == merge | episode == finale | episode == premier) %>%
select(version_season, episode, imdb_rating) %>%
summarise(pmf_imdb = mean(imdb_rating, na.rm=TRUE)) %>%
merge((viewers %>% select(version_season, viewers, imdb_rating)),
by = "version_season") %>% group_by(version_season) %>%
mutate(tot_viewers = sum(viewers, na.rm=TRUE),
avg_imdb = mean(imdb_rating, na.rm=TRUE))
# top 10 seasons
pmf <- tribe_mapping %>%
select(version_season, episode, day, tribe_status) %>%
unique() %>% group_by(version_season) %>% mutate(premier = min(episode)) %>%
filter(tribe_status == "Merged") %>% mutate(merge = min(episode)) %>%
filter(day == max(day)) %>% mutate(finale = max(episode)) %>%
select(version_season, premier, merge, finale) %>% unique() %>%
merge((viewers %>% select(version_season, episode, imdb_rating)),
by = "version_season") %>% group_by(version_season) %>%
filter(episode == merge | episode == finale | episode == premier) %>%
select(version_season, episode, imdb_rating) %>%
summarise(pmf_imdb = mean(imdb_rating, na.rm=TRUE)) %>%
merge((viewers %>% select(version_season, viewers, imdb_rating)),
by = "version_season") %>% group_by(version_season) %>%
mutate(tot_viewers = sum(viewers, na.rm=TRUE),
avg_imdb = mean(imdb_rating, na.rm=TRUE)) %>%
select(-c(viewers, imdb_rating)) %>% unique()
# top 10 seasons
topSzns <- tribe_mapping %>%
select(version_season, episode, day, tribe_status) %>%
unique() %>% group_by(version_season) %>% mutate(premier = min(episode)) %>%
filter(tribe_status == "Merged") %>% mutate(merge = min(episode)) %>%
filter(day == max(day)) %>% mutate(finale = max(episode)) %>%
select(version_season, premier, merge, finale) %>% unique() %>%
merge((viewers %>% select(version_season, episode, imdb_rating)),
by = "version_season") %>% group_by(version_season) %>%
filter(episode == merge | episode == finale | episode == premier) %>%
select(version_season, episode, imdb_rating) %>%
summarise(pmf_imdb = mean(imdb_rating, na.rm=TRUE)) %>%
merge((viewers %>% select(version_season, viewers, imdb_rating)),
by = "version_season") %>% group_by(version_season) %>%
mutate(tot_viewers = sum(viewers, na.rm=TRUE),
avg_imdb = mean(imdb_rating, na.rm=TRUE)) %>%
select(-c(viewers, imdb_rating)) %>% unique()
stats <- castaways %>%
select(version_season, castaway_id, full_name, day, order, jury_status) %>%
group_by(version_season) %>% mutate(order = max(order) + 1 - order) %>%
arrange(version_season, order) %>% mutate(day = case_when(
!(version_season %in% c("US38", "US40")) ~ day,
is.na(jury_status) ~ day, day >= 35 ~ day, TRUE ~ 35)) %>% ungroup() %>%
select(-c(jury_status)) %>% group_by(version_season, castaway_id) %>%
mutate(order = case_when(n() > 1 ~ min(order), TRUE ~ order),
day = case_when(n() > 1 ~ max(day), TRUE ~ day)) %>% unique() %>%
ungroup() %>% group_by(version_season) %>% mutate(order = row_number()) %>%
ungroup() %>% group_by(castaway_id) %>%
mutate(total_seasons=n(), total_days=sum(day),
best_place=min(order), avg_place=round(mean(order),2)) %>%
ungroup() %>% select(-c(day, order, version_season))
View(stats)
# top 10 seasons
topSzns <- tribe_mapping %>%
select(version_season, episode, day, tribe_status) %>%
unique() %>% group_by(version_season) %>% mutate(premier = min(episode)) %>%
filter(tribe_status == "Merged") %>% mutate(merge = min(episode)) %>%
filter(day == max(day)) %>% mutate(finale = max(episode)) %>%
select(version_season, premier, merge, finale) %>% unique() %>%
merge((viewers %>% select(version_season, episode, imdb_rating)),
by = "version_season") %>% group_by(version_season) %>%
filter(episode == merge | episode == finale | episode == premier) %>%
select(version_season, episode, imdb_rating) %>%
summarise(pmf_imdb = mean(imdb_rating, na.rm=TRUE)) %>%
merge((viewers %>% select(version_season, viewers, imdb_rating)),
by = "version_season") %>% group_by(version_season) %>%
mutate(tot_viewers = sum(viewers, na.rm=TRUE),
avg_imdb = mean(imdb_rating, na.rm=TRUE)) %>%
select(-c(viewers, imdb_rating)) %>% unique()
top10_viewers <- topSzns %>% arrange(desc(tot_viewers)) %>%
head(10) %>% select(version_season)
top10_viewers <- topSzns %>% arrange(desc(tot_viewers)) %>%
head(10) %>% select(version_season) %>% View()
top10_pmf <- topSzns %>% arrange(desc(pmf_imdb)) %>%
head(10) %>% select(version_season) %>% View()
top10_imdb <- topSzns %>% arrange(desc(avg_imdb)) %>%
head(10) %>% select(version_season) %>% View()
topSzns %>% arrange(desc(tot_viewers)) %>% head(10) %>%
select(version_season) %>% rename(viewers = version_season)
top10s <- tibble(
(topSzns %>% arrange(desc(tot_viewers)) %>% head(10) %>%
select(version_season) %>% rename(viewers = version_season)),
(topSzns %>% arrange(desc(pmf_imdb)) %>% head(10) %>%
select(version_season) %>% rename(pmf = version_season)),
(topSzns %>% arrange(desc(avg_imdb)) %>% head(10) %>%
select(version_season) %>% rename(imdb = version_season))
)
View(top10s)
