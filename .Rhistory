select(version_season, episode, day, tribe_status) %>%
unique() %>% group_by(version_season) %>% mutate(premier = min(episode)) %>%
filter(tribe_status == "Merged") %>% mutate(merge = min(episode)) %>%
filter(day == max(day)) %>% mutate(finale = max(episode)) %>%
select(version_season, premier, merge, finale) %>% unique() %>%
nest()
pmf <- tribe_mapping %>%
select(version_season, episode, day, tribe_status) %>%
unique() %>% group_by(version_season) %>% mutate(premier = min(episode)) %>%
filter(tribe_status == "Merged") %>% mutate(merge = min(episode)) %>%
filter(day == max(day)) %>% mutate(finale = max(episode)) %>%
select(version_season, premier, merge, finale) %>% unique() %>%
nest() %>% rename(pmf = data)
View(pmf[[2]][[1]])
# top 10 seasons
pmf <- tribe_mapping %>%
select(version_season, episode, day, tribe_status) %>%
unique() %>% group_by(version_season) %>% mutate(premier = min(episode)) %>%
filter(tribe_status == "Merged") %>% mutate(merge = min(episode)) %>%
filter(day == max(day)) %>% mutate(finale = max(episode)) %>%
select(version_season, premier, merge, finale) %>% unique() %>%
nest() %>% rename(pmf = data)
topSzns <- viewers %>% select(version_season, viewers, imdb_rating) %>%
group_by(version_seaon) %>%
summarise(tot_viewers = sum(viewers, na.rm=TRUE),
avg_imdb = mean(imdb_rating, na.rm=TRUE)) %>%
merge(pmf, by = "version_season")
topSzns <- viewers %>% select(version_season, viewers, imdb_rating) %>%
group_by(version_season) %>%
summarise(tot_viewers = sum(viewers, na.rm=TRUE),
avg_imdb = mean(imdb_rating, na.rm=TRUE)) %>%
merge(pmf, by = "version_season")
topSzns <- viewers %>% select(version_season, episode, viewers, imdb_rating) %>%
merge(pmf, by = "version_season") %>%
group_by(version_season) %>%
summarise(tot_viewers = sum(viewers, na.rm=TRUE),
avg_imdb = mean(imdb_rating, na.rm=TRUE))
topSzns <- viewers %>% select(version_season, episode, viewers, imdb_rating) %>%
merge(pmf, by = "version_season")
topSzns <- viewers %>% select(version_season, episode, viewers, imdb_rating) %>%
merge(pmf, by = "version_season") %>%
mutate(yeet = case_when(
episode %in% c(pmf$premier,pmf$merge,pmf$finale) ~ TRUE, TRUE ~ FALSE))
# top 10 seasons
pmf <- tribe_mapping %>%
select(version_season, episode, day, tribe_status) %>%
unique() %>% group_by(version_season) %>% mutate(premier = min(episode)) %>%
filter(tribe_status == "Merged") %>% mutate(merge = min(episode)) %>%
filter(day == max(day)) %>% mutate(finale = max(episode)) %>%
select(version_season, premier, merge, finale) %>% unique() %>%
mutate(pmf = list(premier, merge, finale))
stats <- castaways %>%
select(version_season, castaway_id, full_name, day, order, jury_status) %>%
group_by(version_season) %>% mutate(order = max(order) + 1 - order) %>%
arrange(version_season, order) %>% mutate(day = case_when(
!(version_season %in% c("US38", "US40")) ~ day,
is.na(jury_status) ~ day, day >= 35 ~ day, TRUE ~ 35)) %>% ungroup() %>%
select(-c(jury_status)) %>% group_by(version_season, castaway_id) %>%
mutate(order = case_when(n() > 1 ~ min(order), TRUE ~ order),
day = case_when(n() > 1 ~ max(day), TRUE ~ day)) %>% unique() %>%
ungroup() %>% group_by(version_season) %>% mutate(order = row_number()) %>%
ungroup() %>% group_by(castaway_id) %>%
mutate(total_seasons=n(), total_days=sum(day),
best_place=min(order), avg_place=round(mean(order),2)) %>%
ungroup()
# Chunk 1
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
# Chunk 2: load_libraries
library(tidyverse)
library(survivoR)
library(igraph)
# Chunk 3: load_data
# self-comparisons
selfCompare <- read_csv("./selfCompare.csv", show_col_types = FALSE) %>%
select(-c(gender)) %>% fill(season) %>%
pivot_longer(3:9, values_to="inspiration") %>% select(-c(name)) %>%
filter(!is.na(inspiration)) %>%
separate(inspiration, into = c('inspFirst', 'inspLast'),
sep=" ", extra="merge", remove=FALSE)
# top seasons from reddit
reddit <- read_csv("./season_census.csv", show_col_types = FALSE) %>%
mutate(season = str_c("US",sprintf("%02d",season)))
# Chunk 4: tidy_names
fullNames <- castaway_details %>%
merge((castaways %>% select(c(castaway_id, version_season))),
by="castaway_id") %>%
mutate(full_name = case_when(
castaway_id == "US0281" ~ "JT Thomas",
castaway_id == "US0029" ~ "Elisabeth Hasselbeck",
TRUE ~ full_name)) %>%
separate(full_name, into = c('first','last'),
sep = " ", extra = "merge", remove = FALSE) %>%
mutate(name = case_when(
str_detect(full_name,short_name) ~ str_c(first, ' ', last),
TRUE ~ str_c(first, ' "', short_name, '" ', last))) %>%
select(castaway_id, full_name, first, short_name, last) %>%
merge((selfCompare %>% select(c(inspiration, inspFirst, inspLast))),
by.x="last", by.y="inspLast", all=TRUE) %>% unique() %>%
mutate(inspiration = case_when(
!is.na(inspiration) ~ inspiration,
str_detect(short_name, first) ~ full_name,
short_name == last ~ full_name,
castaway_id == "US0302" ~ full_name,
castaway_id == "US0305" ~ "Jimmy Tarantino",
TRUE ~ str_c(short_name, last, sep=" "))) %>%
mutate(fullName = case_when(
is.na(inspFirst) ~ inspiration,
full_name == inspiration ~ full_name,
short_name == inspFirst ~ inspiration,
short_name == "Shan" ~ str_c(short_name, last, sep=" "),
str_detect(full_name, short_name) ~ full_name,
TRUE ~ str_c(short_name, last, sep=" "))) %>%
rename(shortName = short_name) %>%
left_join(castaways, by="castaway_id") %>% unique() %>%
mutate(season = substr(version_season,3,4)) %>%
select(season, castaway_id, first, shortName, last, fullName)
# Chunk 5: top10_seasons
# top seasons from github data
topSzns <- tribe_mapping %>%
select(version_season, episode, day, tribe_status) %>%
unique() %>% group_by(version_season) %>% mutate(premier = min(episode)) %>%
filter(tribe_status == "Merged") %>% mutate(merge = min(episode)) %>%
filter(day == max(day)) %>% mutate(finale = max(episode)) %>%
select(version_season, premier, merge, finale) %>% unique() %>%
merge((viewers %>% select(version_season, episode, imdb_rating)),
by = "version_season") %>% group_by(version_season) %>%
filter(episode == merge | episode == finale | episode == premier) %>%
select(version_season, episode, imdb_rating) %>%
summarise(pmf_imdb = mean(imdb_rating, na.rm=TRUE)) %>%
merge((viewers %>% select(version_season, viewers, imdb_rating)),
by = "version_season") %>% group_by(version_season) %>%
mutate(tot_viewers = sum(viewers, na.rm=TRUE),
avg_imdb = mean(imdb_rating, na.rm=TRUE)) %>%
select(-c(viewers, imdb_rating)) %>% unique()
# most common seasons across 4 categories:
# total viewers, imdb ratings, premier/merge/finale ratings, reddit ratings
top10s <- tibble((topSzns %>% arrange(desc(tot_viewers)) %>% head(10) %>%
select(version_season) %>% rename(viewers = version_season)),
(topSzns %>% arrange(desc(pmf_imdb)) %>% head(10) %>%
select(version_season) %>% rename(pmf = version_season)),
(topSzns %>% arrange(desc(avg_imdb)) %>% head(10) %>%
select(version_season) %>% rename(imdb = version_season)),
(reddit %>% arrange(desc(percent)) %>% head(10) %>%
select(season) %>% rename(reddit = season))) %>%
pivot_longer(everything(), names_to="source", values_to="season") %>%
group_by(season) %>% summarise(count = n()) %>% arrange(desc(count)) %>%
filter(count > 1) %>% head(10) %>% select(season)
# Chunk 6: placement_details
# total seasons, total days, highest placement, average placement
stats <- castaways %>%
select(version_season, castaway_id, full_name, day, order, jury_status) %>%
group_by(version_season) %>% mutate(order = max(order) + 1 - order) %>%
arrange(version_season, order) %>% mutate(day = case_when(
!(version_season %in% c("US38", "US40")) ~ day,
is.na(jury_status) ~ day, day >= 35 ~ day, TRUE ~ 35)) %>% ungroup() %>%
select(-c(jury_status)) %>% group_by(version_season, castaway_id) %>%
mutate(order = case_when(n() > 1 ~ min(order), TRUE ~ order),
day = case_when(n() > 1 ~ max(day), TRUE ~ day)) %>% unique() %>%
ungroup() %>% group_by(version_season) %>% mutate(order = row_number()) %>%
ungroup() %>% group_by(castaway_id) %>%
mutate(total_seasons=n(), total_days=sum(day),
best_place=min(order), avg_place=round(mean(order),2)) %>%
ungroup() %>% select(-c(day, order, version_season, full_name)) %>% unique()
setwd("~/Important/BYUI/2022-02-Spring/02-ProjectManagement/network/survivoRnet")
# Chunk 1
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
# Chunk 2: load_libraries
library(tidyverse)
library(survivoR)
library(igraph)
# Chunk 3: load_data
# self-comparisons
selfCompare <- read_csv("./selfCompare.csv", show_col_types = FALSE) %>%
select(-c(gender)) %>% fill(season) %>%
pivot_longer(3:9, values_to="inspiration") %>% select(-c(name)) %>%
filter(!is.na(inspiration)) %>%
separate(inspiration, into = c('inspFirst', 'inspLast'),
sep=" ", extra="merge", remove=FALSE)
# top seasons from reddit
reddit <- read_csv("./season_census.csv", show_col_types = FALSE) %>%
mutate(season = str_c("US",sprintf("%02d",season)))
# Chunk 4: tidy_names
fullNames <- castaway_details %>%
merge((castaways %>% select(c(castaway_id, version_season))),
by="castaway_id") %>%
mutate(full_name = case_when(
castaway_id == "US0281" ~ "JT Thomas",
castaway_id == "US0029" ~ "Elisabeth Hasselbeck",
TRUE ~ full_name)) %>%
separate(full_name, into = c('first','last'),
sep = " ", extra = "merge", remove = FALSE) %>%
mutate(name = case_when(
str_detect(full_name,short_name) ~ str_c(first, ' ', last),
TRUE ~ str_c(first, ' "', short_name, '" ', last))) %>%
select(castaway_id, full_name, first, short_name, last) %>%
merge((selfCompare %>% select(c(inspiration, inspFirst, inspLast))),
by.x="last", by.y="inspLast", all=TRUE) %>% unique() %>%
mutate(inspiration = case_when(
!is.na(inspiration) ~ inspiration,
str_detect(short_name, first) ~ full_name,
short_name == last ~ full_name,
castaway_id == "US0302" ~ full_name,
castaway_id == "US0305" ~ "Jimmy Tarantino",
TRUE ~ str_c(short_name, last, sep=" "))) %>%
mutate(fullName = case_when(
is.na(inspFirst) ~ inspiration,
full_name == inspiration ~ full_name,
short_name == inspFirst ~ inspiration,
short_name == "Shan" ~ str_c(short_name, last, sep=" "),
str_detect(full_name, short_name) ~ full_name,
TRUE ~ str_c(short_name, last, sep=" "))) %>%
rename(shortName = short_name) %>%
left_join(castaways, by="castaway_id") %>% unique() %>%
mutate(season = substr(version_season,3,4)) %>%
select(season, castaway_id, first, shortName, last, fullName)
# Chunk 5: top10_seasons
# top seasons from github data
topSzns <- tribe_mapping %>%
select(version_season, episode, day, tribe_status) %>%
unique() %>% group_by(version_season) %>% mutate(premier = min(episode)) %>%
filter(tribe_status == "Merged") %>% mutate(merge = min(episode)) %>%
filter(day == max(day)) %>% mutate(finale = max(episode)) %>%
select(version_season, premier, merge, finale) %>% unique() %>%
merge((viewers %>% select(version_season, episode, imdb_rating)),
by = "version_season") %>% group_by(version_season) %>%
filter(episode == merge | episode == finale | episode == premier) %>%
select(version_season, episode, imdb_rating) %>%
summarise(pmf_imdb = mean(imdb_rating, na.rm=TRUE)) %>%
merge((viewers %>% select(version_season, viewers, imdb_rating)),
by = "version_season") %>% group_by(version_season) %>%
mutate(tot_viewers = sum(viewers, na.rm=TRUE),
avg_imdb = mean(imdb_rating, na.rm=TRUE)) %>%
select(-c(viewers, imdb_rating)) %>% unique()
# most common seasons across 4 categories:
# total viewers, imdb ratings, premier/merge/finale ratings, reddit ratings
top10s <- tibble((topSzns %>% arrange(desc(tot_viewers)) %>% head(10) %>%
select(version_season) %>% rename(viewers = version_season)),
(topSzns %>% arrange(desc(pmf_imdb)) %>% head(10) %>%
select(version_season) %>% rename(pmf = version_season)),
(topSzns %>% arrange(desc(avg_imdb)) %>% head(10) %>%
select(version_season) %>% rename(imdb = version_season)),
(reddit %>% arrange(desc(percent)) %>% head(10) %>%
select(season) %>% rename(reddit = season))) %>%
pivot_longer(everything(), names_to="source", values_to="season") %>%
group_by(season) %>% summarise(count = n()) %>% arrange(desc(count)) %>%
filter(count > 1) %>% head(10) %>% select(season)
# Chunk 6: placement_details
# total seasons, total days, highest placement, average placement
stats <- castaways %>%
select(version_season, castaway_id, full_name, day, order, jury_status) %>%
group_by(version_season) %>% mutate(order = max(order) + 1 - order) %>%
arrange(version_season, order) %>% mutate(day = case_when(
!(version_season %in% c("US38", "US40")) ~ day,
is.na(jury_status) ~ day, day >= 35 ~ day, TRUE ~ 35)) %>% ungroup() %>%
select(-c(jury_status)) %>% group_by(version_season, castaway_id) %>%
mutate(order = case_when(n() > 1 ~ min(order), TRUE ~ order),
day = case_when(n() > 1 ~ max(day), TRUE ~ day)) %>% unique() %>%
ungroup() %>% group_by(version_season) %>% mutate(order = row_number()) %>%
ungroup() %>% group_by(castaway_id) %>%
mutate(total_seasons=n(), total_days=sum(day),
best_place=min(order), avg_place=round(mean(order),2)) %>%
ungroup() %>% select(-c(day, order, version_season, full_name)) %>% unique()
# gender comparison, race comparison, last 5 seasons,
# number of comparisons, link tree
selfCompare <- selfCompare %>% select(-c(inspFirst, inspLast)) %>%
mutate(season = substr(season,8,9)) %>%
left_join(fullNames,  by=c("season"="season", "castaway"="shortName")) %>%
rename(cast_name = fullName, cast_id = castaway_id) %>%
select(cast_id, cast_name, inspiration) %>%
left_join(fullNames, by=c("inspiration"="fullName")) %>%
rename(inspo_name = inspiration, inspo_id = castaway_id) %>%
select(cast_id, cast_name, inspo_id, inspo_name) %>% unique()
View(selfCompare)
View(castaways)
details <- castaway_details %>%
mutate(race = case_when(
race == "Black" ~ "Black", poc == "White" ~ "White",
race == "Asian" ~ "Asian", str_detect(ethnicity,"Asian") ~ "Asian",
str_detect(ethnicity,"Hispanic") ~ "Latino", TRUE ~ "Mixed"
), gender = case_when(
gender == "Non-binary" ~ "Female", TRUE ~ gender
)) %>% select(castaway_id, race, gender)
View(details)
details <- castaway_details %>%
mutate(race = case_when(
race == "Black" ~ "Black", poc == "White" ~ "White",
race == "Asian" ~ "Asian", str_detect(ethnicity,"Asian") ~ "Asian",
str_detect(ethnicity,"Hispanic") ~ "Latino", TRUE ~ "Mixed"
), gender = case_when(
gender == "Non-binary" ~ "Female", TRUE ~ gender
)) %>% select(castaway_id, race, gender) %>%
merge((castaways %>% select(castaway_id, season)), by="castaway_id")
# gender comparison, race comparison, last 5 seasons,
# number of comparisons, link tree
selfCompare <- selfCompare %>% select(-c(inspFirst, inspLast)) %>%
mutate(season = substr(season,8,9)) %>%
left_join(fullNames,  by=c("season"="season", "castaway"="shortName")) %>%
rename(cast_name = fullName, cast_id = castaway_id) %>%
select(cast_id, cast_name, inspiration) %>%
left_join(fullNames, by=c("inspiration"="fullName")) %>%
rename(inspo_name = inspiration, inspo_id = castaway_id) %>%
select(cast_id, cast_name, inspo_id, inspo_name) %>% unique() %>%
group_by(inspo_id) %>% mutate(count = n()) %>% ungroup()
# gender comparison, race comparison, last 5 seasons,
# number of comparisons, link tree
selfCompare <- selfCompare %>% select(-c(inspFirst, inspLast)) %>%
mutate(season = substr(season,8,9)) %>%
left_join(fullNames,  by=c("season"="season", "castaway"="shortName")) %>%
rename(cast_name = fullName, cast_id = castaway_id) %>%
select(cast_id, cast_name, inspiration) %>%
left_join(fullNames, by=c("inspiration"="fullName")) %>%
rename(inspo_name = inspiration, inspo_id = castaway_id) %>%
select(cast_id, cast_name, inspo_id, inspo_name) %>% unique() %>%
group_by(inspo_id) %>% mutate(count = n()) %>% ungroup()
# Chunk 1
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
# Chunk 2: load_libraries
library(tidyverse)
library(survivoR)
library(igraph)
# Chunk 3: load_data
# self-comparisons
selfCompare <- read_csv("./selfCompare.csv", show_col_types = FALSE) %>%
select(-c(gender)) %>% fill(season) %>%
pivot_longer(3:9, values_to="inspiration") %>% select(-c(name)) %>%
filter(!is.na(inspiration)) %>%
separate(inspiration, into = c('inspFirst', 'inspLast'),
sep=" ", extra="merge", remove=FALSE)
# top seasons from reddit
reddit <- read_csv("./season_census.csv", show_col_types = FALSE) %>%
mutate(season = str_c("US",sprintf("%02d",season)))
# Chunk 4: tidy_names
fullNames <- castaway_details %>%
merge((castaways %>% select(c(castaway_id, version_season))),
by="castaway_id") %>%
mutate(full_name = case_when(
castaway_id == "US0281" ~ "JT Thomas",
castaway_id == "US0029" ~ "Elisabeth Hasselbeck",
TRUE ~ full_name)) %>%
separate(full_name, into = c('first','last'),
sep = " ", extra = "merge", remove = FALSE) %>%
mutate(name = case_when(
str_detect(full_name,short_name) ~ str_c(first, ' ', last),
TRUE ~ str_c(first, ' "', short_name, '" ', last))) %>%
select(castaway_id, full_name, first, short_name, last) %>%
merge((selfCompare %>% select(c(inspiration, inspFirst, inspLast))),
by.x="last", by.y="inspLast", all=TRUE) %>% unique() %>%
mutate(inspiration = case_when(
!is.na(inspiration) ~ inspiration,
str_detect(short_name, first) ~ full_name,
short_name == last ~ full_name,
castaway_id == "US0302" ~ full_name,
castaway_id == "US0305" ~ "Jimmy Tarantino",
TRUE ~ str_c(short_name, last, sep=" "))) %>%
mutate(fullName = case_when(
is.na(inspFirst) ~ inspiration,
full_name == inspiration ~ full_name,
short_name == inspFirst ~ inspiration,
short_name == "Shan" ~ str_c(short_name, last, sep=" "),
str_detect(full_name, short_name) ~ full_name,
TRUE ~ str_c(short_name, last, sep=" "))) %>%
rename(shortName = short_name) %>%
left_join(castaways, by="castaway_id") %>% unique() %>%
mutate(season = substr(version_season,3,4)) %>%
select(season, castaway_id, first, shortName, last, fullName)
# Chunk 5: top10_seasons
# top seasons from github data
topSzns <- tribe_mapping %>%
select(version_season, episode, day, tribe_status) %>%
unique() %>% group_by(version_season) %>% mutate(premier = min(episode)) %>%
filter(tribe_status == "Merged") %>% mutate(merge = min(episode)) %>%
filter(day == max(day)) %>% mutate(finale = max(episode)) %>%
select(version_season, premier, merge, finale) %>% unique() %>%
merge((viewers %>% select(version_season, episode, imdb_rating)),
by = "version_season") %>% group_by(version_season) %>%
filter(episode == merge | episode == finale | episode == premier) %>%
select(version_season, episode, imdb_rating) %>%
summarise(pmf_imdb = mean(imdb_rating, na.rm=TRUE)) %>%
merge((viewers %>% select(version_season, viewers, imdb_rating)),
by = "version_season") %>% group_by(version_season) %>%
mutate(tot_viewers = sum(viewers, na.rm=TRUE),
avg_imdb = mean(imdb_rating, na.rm=TRUE)) %>%
select(-c(viewers, imdb_rating)) %>% unique()
# most common seasons across 4 categories:
# total viewers, imdb ratings, premier/merge/finale ratings, reddit ratings
top10s <- tibble((topSzns %>% arrange(desc(tot_viewers)) %>% head(10) %>%
select(version_season) %>% rename(viewers = version_season)),
(topSzns %>% arrange(desc(pmf_imdb)) %>% head(10) %>%
select(version_season) %>% rename(pmf = version_season)),
(topSzns %>% arrange(desc(avg_imdb)) %>% head(10) %>%
select(version_season) %>% rename(imdb = version_season)),
(reddit %>% arrange(desc(percent)) %>% head(10) %>%
select(season) %>% rename(reddit = season))) %>%
pivot_longer(everything(), names_to="source", values_to="season") %>%
group_by(season) %>% summarise(count = n()) %>% arrange(desc(count)) %>%
filter(count > 1) %>% head(10) %>% select(season)
# Chunk 6: placement_details
# total seasons, total days, highest placement, average placement
stats <- castaways %>%
select(version_season, castaway_id, full_name, day, order, jury_status) %>%
group_by(version_season) %>% mutate(order = max(order) + 1 - order) %>%
arrange(version_season, order) %>% mutate(day = case_when(
!(version_season %in% c("US38", "US40")) ~ day,
is.na(jury_status) ~ day, day >= 35 ~ day, TRUE ~ 35)) %>% ungroup() %>%
select(-c(jury_status)) %>% group_by(version_season, castaway_id) %>%
mutate(order = case_when(n() > 1 ~ min(order), TRUE ~ order),
day = case_when(n() > 1 ~ max(day), TRUE ~ day)) %>% unique() %>%
ungroup() %>% group_by(version_season) %>% mutate(order = row_number()) %>%
ungroup() %>% group_by(castaway_id) %>%
mutate(total_seasons=n(), total_days=sum(day),
best_place=min(order), avg_place=round(mean(order),2)) %>%
ungroup() %>% select(-c(day, order, version_season, full_name)) %>% unique()
# gender comparison, race comparison, last 5 seasons,
# number of comparisons, link tree
comparisons <- selfCompare %>% select(-c(inspFirst, inspLast)) %>%
mutate(season = substr(season,8,9)) %>%
left_join(fullNames,  by=c("season"="season", "castaway"="shortName")) %>%
rename(cast_name = fullName, cast_id = castaway_id) %>%
select(cast_id, cast_name, inspiration) %>%
left_join(fullNames, by=c("inspiration"="fullName")) %>%
rename(inspo_name = inspiration, inspo_id = castaway_id) %>%
select(cast_id, cast_name, inspo_id, inspo_name) %>% unique() %>%
group_by(inspo_id) %>% mutate(count = n()) %>% ungroup()
View(comparisons)
comp_detes <- comparisons %>%
merge(details, by.x = "cast_id", by.y = "castaway_id") %>%
rename(c_season = season, c_race = race, c_gender = gender) %>%
merge(details, by.x = "inspo_id", by.y = "castaway_id") %>%
rename(i_season = season, i_race = race, i_gender = gender)
View(comp_detes)
comp_detes <- comparisons %>%
merge(details, by.x = "cast_id", by.y = "castaway_id") %>%
rename(c_season = season, c_race = race, c_gender = gender) %>%
merge(details, by.x = "inspo_id", by.y = "castaway_id") %>%
rename(i_season = season, i_race = race, i_gender = gender) %>%
select(cast_id, cast_name, c_season, c_race, c_gender,
inspo_id, inspo_name, i_season, i_race, i_gender, count)
comp_detes <- comparisons %>%
merge(details, by.x = "cast_id", by.y = "castaway_id") %>%
rename(c_season = season, c_race = race, c_gender = gender) %>%
merge(details, by.x = "inspo_id", by.y = "castaway_id") %>%
rename(i_season = season, i_race = race, i_gender = gender) %>%
select(cast_id, cast_name, c_season, c_race, c_gender,
inspo_id, inspo_name, i_season, i_race, i_gender, count) %>%
group_by(inspo_id) %>%
mutate(season = case_when(i_season <= c_season ~ max(i_season)))
max_lt_szn <- function(i_szn, c_szn){
which(i_szn == max(i_szn[i_szn < c_czn]))
}
max_lt_szn <- Vectorize(max_lt_szn)
max_lt_szn(i_szn = c(13, 16, 20, 40), c_szn = 26)
which(i_szn == max(i_szn[i_szn < c_szn]))
max_lt_szn <- function(i_szn, c_szn){
which(i_szn == max(i_szn[i_szn < c_szn]))
}
max_lt_szn <- Vectorize(max_lt_szn)
max_lt_szn(i_szn = c(13, 16, 20, 40), c_szn = 26)
i_szn <- c(13, 16, 20, 40)
c_szn <- 26
which(i_szn == max(i_szn))
which(i_szn == max(i_szn[i_szn < c_szn]))
i_szn[which(i_szn == max(i_szn[i_szn < c_szn]))]
max_lt_szn <- function(i_szn, c_szn){
i_szn[which(i_szn == max(i_szn[i_szn < c_szn]))]
}
max_lt_szn <- Vectorize(max_lt_szn)
max_lt_szn(c(13, 16, 20, 40), 26)
View(max_lt_szn)
View(max_lt_szn)
max_lt_szn <- function(i_szn, c_szn){
i_szn[which(i_szn == max(i_szn[i_szn < c_szn]))]
}
max_lt_szn <- Vectorize(max_lt_szn)
max_lt_szn(c(13, 16, 20, 40), 26)
comp_detes <- comparisons %>%
merge(details, by.x = "cast_id", by.y = "castaway_id") %>%
rename(c_szn = season, c_race = race, c_gender = gender) %>%
merge(details, by.x = "inspo_id", by.y = "castaway_id") %>%
rename(i_szn = season, i_race = race, i_gender = gender) %>%
select(cast_id, cast_name, c_szn, c_race, c_gender,
inspo_id, inspo_name, i_szn, i_race, i_gender, count) %>%
group_by(inspo_id) %>%
mutate(season = i_szn[which(i_szn == max(i_szn[i_szn < c_szn]))])
mutate(season = max(i_szn[i_szn < c_szn])
mutate(season = max(i_szn[i_szn < c_szn])
mutate(season = max(i_szn[i_szn < c_szn])
clear
clear
comp_detes <- comparisons %>%
merge(details, by.x = "cast_id", by.y = "castaway_id") %>%
rename(c_szn = season, c_race = race, c_gender = gender) %>%
merge(details, by.x = "inspo_id", by.y = "castaway_id") %>%
rename(i_szn = season, i_race = race, i_gender = gender) %>%
select(cast_id, cast_name, c_szn, c_race, c_gender,
inspo_id, inspo_name, i_szn, i_race, i_gender, count) %>%
group_by(inspo_id) %>%mutate(season = max(i_szn[i_szn < c_szn]))
comp_detes <- comparisons %>%
merge(details, by.x = "cast_id", by.y = "castaway_id") %>%
rename(c_szn = season, c_race = race, c_gender = gender) %>%
merge(details, by.x = "inspo_id", by.y = "castaway_id") %>%
rename(i_szn = season, i_race = race, i_gender = gender) %>%
select(cast_id, cast_name, c_szn, c_race, c_gender,
inspo_id, inspo_name, i_szn, i_race, i_gender, count) %>%
mutate(season = max(i_szn[i_szn < c_szn]))
comp_detes <- comparisons %>%
merge(details, by.x = "cast_id", by.y = "castaway_id") %>%
rename(c_szn = season, c_race = race, c_gender = gender) %>%
merge(details, by.x = "inspo_id", by.y = "castaway_id") %>%
rename(i_szn = season, i_race = race, i_gender = gender) %>%
select(cast_id, cast_name, c_szn, c_race, c_gender,
inspo_id, inspo_name, i_szn, i_race, i_gender, count) %>%
group_by(inspo_id) %>% mutate(season = max(i_szn[i_szn < c_szn]))
